var identityCardContractAddress = '0x267EE4b8eC7357252B6b8A2E6A2481AB40Da5076';
var medicalDataContractAddress = '0x267EE4b8eC7357252B6b8A2E6A2481AB40Da5076';
var centralDatabaseContractAddress = '0x7fC09FFa7a5B10DCb8D63E7F7442F78D061380c6';
var abiIdentityCard = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "pushDoctor",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "pushPatient",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "role",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "medicalData",
				"type": "address"
			}
		],
		"name": "updateMedicalData",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "parentHospital",
				"type": "address"
			}
		],
		"name": "updateParentHospital",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewMedicalData",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewParentHospital",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
var abiMedicalData = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "addDoctorByHospital",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "addDoctorByPatient",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "addHospitalByHospital",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "addHospitalByPatient",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "deleteRequest",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "data",
				"type": "string"
			}
		],
		"name": "editMedicalData",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "removeDoctorByHospital",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "removeDoctorByPatient",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "removeHospitalsByPatient",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "submitRequests",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "centralDatabase",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "getLog",
		"outputs": [
			{
				"internalType": "string[]",
				"name": "",
				"type": "string[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isAuthorized",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isNotOwner",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isOwner",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewAuthorisedDoctorsArray",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewAuthorisedHospitalsArray",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewMedicalDataByDoctor",
		"outputs": [
			{
				"internalType": "string[]",
				"name": "",
				"type": "string[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewMedicalDataByPatient",
		"outputs": [
			{
				"internalType": "string[]",
				"name": "",
				"type": "string[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewRequests",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
var abiCenteralDatabase = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "identityCardAddress",
				"type": "address"
			}
		],
		"name": "updateDoctor",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "identityCardAddress",
				"type": "address"
			}
		],
		"name": "updateHospital",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "identityCardAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "medicalDataAddress",
				"type": "address"
			}
		],
		"name": "updatePatient",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getIDCard",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getMedicalDataAddress",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getParentHospital",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "isDoctor",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "isHospital",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "isPatient",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadDoctors",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadDoctorsOfHospital",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadHospitals",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadPatients",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadPatientsOfHospital",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "role",
		"outputs": [
			{
				"internalType": "int256",
				"name": "",
				"type": "int256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];

var bytecodeMedicalData= "60806040523480156200001157600080fd5b506040516200365a3803806200365a83398181016040528101906200003791906200013b565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001d5565b6000815190506200013581620001bb565b92915050565b60008060408385031215620001555762000154620001b6565b5b6000620001658582860162000124565b9250506020620001788582860162000124565b9150509250929050565b60006200018f8262000196565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001c68162000182565b8114620001d257600080fd5b50565b61347580620001e56000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063909e4ab6116100ad578063d23b288811610071578063d23b28881461031e578063d88968541461033c578063de607e3c1461035a578063e9a21bcd14610378578063f7653d101461039457610121565b8063909e4ab61461025457806390cbc1c214610272578063a655fe531461028e578063b54b09c0146102be578063c5fe4dde146102ee57610121565b8063521e686d116100f4578063521e686d146101be57806356e20e7a146101dc57806357e6c2f4146101fa5780637444c9f5146102185780638f32d59b1461023657610121565b80630a79f810146101265780631112a7e114610156578063485c9b3f14610186578063512a3c64146101a2575b600080fd5b610140600480360381019061013b919061268f565b61039e565b60405161014d9190612c19565b60405180910390f35b610170600480360381019061016b919061268f565b6106f3565b60405161017d9190612c19565b60405180910390f35b6101a0600480360381019061019b919061268f565b610906565b005b6101bc60048036038101906101b7919061268f565b610dca565b005b6101c6611049565b6040516101d39190612bd5565b60405180910390f35b6101e4611131565b6040516101f19190612bd5565b60405180910390f35b610202611219565b60405161020f9190612c19565b60405180910390f35b6102206112c4565b60405161022d9190612bd5565b60405180910390f35b61023e6113ac565b60405161024b9190612c19565b60405180910390f35b61025c611404565b6040516102699190612bf7565b60405180910390f35b61028c6004803603810190610287919061268f565b611537565b005b6102a860048036038101906102a39190612716565b61184e565b6040516102b59190612c19565b60405180910390f35b6102d860048036038101906102d3919061268f565b6119a9565b6040516102e59190612c19565b60405180910390f35b6103086004803603810190610303919061268f565b611bf2565b6040516103159190612c19565b60405180910390f35b610326611e04565b6040516103339190612c19565b60405180910390f35b610344611e5d565b6040516103519190612bf7565b60405180910390f35b610362611f82565b60405161036f9190612bf7565b60405180910390f35b610392600480360381019061038d919061275f565b6120b5565b005b61039c612153565b005b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bdf6c673336040518263ffffffff1660e01b81526004016103ff9190612bba565b60206040518083038186803b15801561041757600080fd5b505afa15801561042b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044f91906126e9565b61045857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663996440c6846040518263ffffffff1660e01b81526004016104919190612bba565b60206040518083038186803b1580156104a957600080fd5b505afa1580156104bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e191906126e9565b6104ea57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663a4c63410856040518263ffffffff1660e01b815260040161053a9190612bba565b60206040518083038186803b15801561055257600080fd5b505afa158015610566573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058a91906126bc565b73ffffffffffffffffffffffffffffffffffffffff16146105aa57600080fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146105f557600080fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461064157600080fd5b6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461074f57600080fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663996440c6846040518263ffffffff1660e01b81526004016107af9190612bba565b60206040518083038186803b1580156107c757600080fd5b505afa1580156107db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ff91906126e9565b61080857600080fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461085457600080fd5b6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001915050919050565b61090e6113ac565b61094d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094490612c34565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109a757600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146109f257600080fd5b6000805b600480549050811015610a8c578273ffffffffffffffffffffffffffffffffffffffff1660048281548110610a2e57610a2d61316b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a79578091505b8080610a8490613064565b9150506109f6565b5060048181548110610aa157610aa061316b565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001600380549050610b529190612ed8565b90505b60008110610d57578373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663a4c6341060038481548110610ba457610ba361316b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610beb9190612bba565b60206040518083038186803b158015610c0357600080fd5b505afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906126bc565b73ffffffffffffffffffffffffffffffffffffffff161415610d44576005610c62426121b8565b610ca960038481548110610c7957610c7861316b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661231f565b604051602001610cba929190612b46565b604051602081830303815290604052908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610d01929190612528565b5060038181548110610d1657610d1561316b565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b8080610d4f90612fd7565b915050610b55565b506005610d63426121b8565b610d6c8561231f565b604051602001610d7d929190612a80565b604051602081830303815290604052908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610dc4929190612528565b50505050565b610dd26113ac565b610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0890612c34565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e6b57600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610eb757600080fd5b6000805b600380549050811015610f51578273ffffffffffffffffffffffffffffffffffffffff1660038281548110610ef357610ef261316b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f3e578091505b8080610f4990613064565b915050610ebb565b5060038181548110610f6657610f6561316b565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506005610fe3426121b8565b610fec8461231f565b604051602001610ffd929190612b0c565b604051602081830303815290604052908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190611044929190612528565b505050565b60603373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110a557600080fd5b600880548060200260200160405190810160405280929190818152602001828054801561112757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116110dd575b5050505050905090565b60603373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461118d57600080fd5b600480548060200260200160405190810160405280929190818152602001828054801561120f57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116111c5575b5050505050905090565b60006001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561126c57600190506112c1565b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156112bc57600190506112c1565b600090505b90565b60603373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461132057600080fd5b60038054806020026020016040519081016040528092919081815260200182805480156113a257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611358575b5050505050905090565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461146057600080fd5b6005805480602002602001604051908101604052809291908181526020016000905b8282101561152e5783829060005260206000200180546114a190613001565b80601f01602080910402602001604051908101604052809291908181526020018280546114cd90613001565b801561151a5780601f106114ef5761010080835404028352916020019161151a565b820191906000526020600020905b8154815290600101906020018083116114fd57829003601f168201915b505050505081526020019060010190611482565b50505050905090565b61153f6113ac565b61157e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157590612c34565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146115ca57600080fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663a4c63410846040518263ffffffff1660e01b81526004016116419190612bba565b60206040518083038186803b15801561165957600080fd5b505afa15801561166d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169191906126bc565b73ffffffffffffffffffffffffffffffffffffffff16146116b157600080fd5b6000805b60038054905081101561174b578373ffffffffffffffffffffffffffffffffffffffff16600382815481106116ed576116ec61316b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611738578091505b808061174390613064565b9150506116b5565b50600381815481106117605761175f61316b565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060056117dd426121b8565b6117e68561231f565b6117ef3361231f565b60405160200161180193929190612aba565b604051602081830303815290604052908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190611848929190612528565b50505050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156118ab57600080fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146118f757600080fd5b6005611902426121b8565b61190b3361231f565b60405160200161191c929190612b80565b604051602081830303815290604052908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190611963929190612528565b5060008290806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061199f929190612528565b5060019050919050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bdf6c673336040518263ffffffff1660e01b8152600401611a0a9190612bba565b60206040518083038186803b158015611a2257600080fd5b505afa158015611a36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5a91906126e9565b611a6357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663bdf6c673846040518263ffffffff1660e01b8152600401611a9c9190612bba565b60206040518083038186803b158015611ab457600080fd5b505afa158015611ac8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aec91906126e9565b611af557600080fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611b4157600080fd5b6004839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611c4e57600080fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bdf6c673846040518263ffffffff1660e01b8152600401611cae9190612bba565b60206040518083038186803b158015611cc657600080fd5b505afa158015611cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cfe91906126e9565b611d0757600080fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611d5357600080fd5b6004839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905090565b60606001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611eab57600080fd5b6000805480602002602001604051908101604052809291908181526020016000905b82821015611f79578382906000526020600020018054611eec90613001565b80601f0160208091040260200160405190810160405280929190818152602001828054611f1890613001565b8015611f655780601f10611f3a57610100808354040283529160200191611f65565b820191906000526020600020905b815481529060010190602001808311611f4857829003601f168201915b505050505081526020019060010190611ecd565b50505050905090565b60603373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611fde57600080fd5b6000805480602002602001604051908101604052809291908181526020016000905b828210156120ac57838290600052602060002001805461201f90613001565b80601f016020809104026020016040519081016040528092919081815260200182805461204b90613001565b80156120985780601f1061206d57610100808354040283529160200191612098565b820191906000526020600020905b81548152906001019060200180831161207b57829003601f168201915b505050505081526020019060010190612000565b50505050905090565b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461210f57600080fd5b600481815481106121235761212261316b565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550565b6008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60606000821415612200576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061231a565b600082905060005b6000821461223257808061221b90613064565b915050600a8261222b9190612de1565b9150612208565b60008167ffffffffffffffff81111561224e5761224d61319a565b5b6040519080825280601f01601f1916602001820160405280156122805781602001600182028036833780820191505090505b50905060008290508593505b6000841461231257600a846122a191906130ad565b60306122ad9190612d54565b60f81b82826122bb90612fd7565b925082815181106122cf576122ce61316b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8461230b9190612de1565b935061228c565b819450505050505b919050565b60606000602867ffffffffffffffff81111561233e5761233d61319a565b5b6040519080825280601f01601f1916602001820160405280156123705781602001600182028036833780820191505090505b50905060005b60148110156124d857600081601361238e9190612ed8565b600861239a9190612e43565b60026123a69190612e43565b8573ffffffffffffffffffffffffffffffffffffffff166123c79190612de1565b60f81b9050600060108260f81c6123de9190612e12565b60f81b905060008160f81c60106123f59190612e9d565b8360f81c6124039190612f0c565b60f81b9050612411826124e2565b8585600261241f9190612e43565b815181106124305761242f61316b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350612468816124e2565b8560018660026124789190612e43565b6124829190612d54565b815181106124935761249261316b565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050505080806124d090613064565b915050612376565b5080915050919050565b6000600a8260f81c60ff16101561250d5760308260f81c6125039190612daa565b60f81b9050612523565b60578260f81c61251d9190612daa565b60f81b90505b919050565b82805461253490613001565b90600052602060002090601f016020900481019282612556576000855561259d565b82601f1061256f57805160ff191683800117855561259d565b8280016001018555821561259d579182015b8281111561259c578251825591602001919060010190612581565b5b5090506125aa91906125ae565b5090565b5b808211156125c75760008160009055506001016125af565b5090565b60006125de6125d984612c79565b612c54565b9050828152602081018484840111156125fa576125f96131ce565b5b612605848285612f95565b509392505050565b60008135905061261c816133fa565b92915050565b600081519050612631816133fa565b92915050565b60008151905061264681613411565b92915050565b600082601f830112612661576126606131c9565b5b81356126718482602086016125cb565b91505092915050565b60008135905061268981613428565b92915050565b6000602082840312156126a5576126a46131d8565b5b60006126b38482850161260d565b91505092915050565b6000602082840312156126d2576126d16131d8565b5b60006126e084828501612622565b91505092915050565b6000602082840312156126ff576126fe6131d8565b5b600061270d84828501612637565b91505092915050565b60006020828403121561272c5761272b6131d8565b5b600082013567ffffffffffffffff81111561274a576127496131d3565b5b6127568482850161264c565b91505092915050565b600060208284031215612775576127746131d8565b5b60006127838482850161267a565b91505092915050565b600061279883836127b8565b60208301905092915050565b60006127b083836128b8565b905092915050565b6127c181612f40565b82525050565b6127d081612f40565b82525050565b60006127e182612cca565b6127eb8185612d05565b93506127f683612caa565b8060005b8381101561282757815161280e888261278c565b975061281983612ceb565b9250506001810190506127fa565b5085935050505092915050565b600061283f82612cd5565b6128498185612d16565b93508360208202850161285b85612cba565b8060005b85811015612897578484038952815161287885826127a4565b945061288383612cf8565b925060208a0199505060018101905061285f565b50829750879550505050505092915050565b6128b281612f52565b82525050565b60006128c382612ce0565b6128cd8185612d27565b93506128dd818560208601612fa4565b6128e6816131dd565b840191505092915050565b60006128fc82612ce0565b6129068185612d49565b9350612916818560208601612fa4565b80840191505092915050565b600061292f600e83612d49565b915061293a826131ee565b600e82019050919050565b6000612952600983612d49565b915061295d82613217565b600982019050919050565b6000612975601783612d49565b915061298082613240565b601782019050919050565b6000612998600183612d49565b91506129a382613269565b600182019050919050565b60006129bb601583612d49565b91506129c682613292565b601582019050919050565b60006129de602c83612d49565b91506129e9826132bb565b602c82019050919050565b6000612a01601483612d49565b9150612a0c8261330a565b601482019050919050565b6000612a24600283612d49565b9150612a2f82613333565b600282019050919050565b6000612a47602783612d38565b9150612a528261335c565b604082019050919050565b6000612a6a602283612d49565b9150612a75826133ab565b602282019050919050565b6000612a8c82856128f1565b9150612a9782612968565b9150612aa382846128f1565b9150612aae82612945565b91508190509392505050565b6000612ac682866128f1565b9150612ad1826129ae565b9150612add82856128f1565b9150612ae882612922565b9150612af482846128f1565b9150612aff8261298b565b9150819050949350505050565b6000612b1882856128f1565b9150612b23826129f4565b9150612b2f82846128f1565b9150612b3a82612945565b91508190509392505050565b6000612b5282856128f1565b9150612b5d826129f4565b9150612b6982846128f1565b9150612b74826129d1565b91508190509392505050565b6000612b8c82856128f1565b9150612b9782612a5d565b9150612ba382846128f1565b9150612bae82612a17565b91508190509392505050565b6000602082019050612bcf60008301846127c7565b92915050565b60006020820190508181036000830152612bef81846127d6565b905092915050565b60006020820190508181036000830152612c118184612834565b905092915050565b6000602082019050612c2e60008301846128a9565b92915050565b60006020820190508181036000830152612c4d81612a3a565b9050919050565b6000612c5e612c6f565b9050612c6a8282613033565b919050565b6000604051905090565b600067ffffffffffffffff821115612c9457612c9361319a565b5b612c9d826131dd565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612d5f82612f7e565b9150612d6a83612f7e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612d9f57612d9e6130de565b5b828201905092915050565b6000612db582612f88565b9150612dc083612f88565b92508260ff03821115612dd657612dd56130de565b5b828201905092915050565b6000612dec82612f7e565b9150612df783612f7e565b925082612e0757612e0661310d565b5b828204905092915050565b6000612e1d82612f88565b9150612e2883612f88565b925082612e3857612e3761310d565b5b828204905092915050565b6000612e4e82612f7e565b9150612e5983612f7e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612e9257612e916130de565b5b828202905092915050565b6000612ea882612f88565b9150612eb383612f88565b92508160ff0483118215151615612ecd57612ecc6130de565b5b828202905092915050565b6000612ee382612f7e565b9150612eee83612f7e565b925082821015612f0157612f006130de565b5b828203905092915050565b6000612f1782612f88565b9150612f2283612f88565b925082821015612f3557612f346130de565b5b828203905092915050565b6000612f4b82612f5e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612fc2578082015181840152602081019050612fa7565b83811115612fd1576000848401525b50505050565b6000612fe282612f7e565b91506000821415612ff657612ff56130de565b5b600182039050919050565b6000600282049050600182168061301957607f821691505b6020821081141561302d5761302c61313c565b5b50919050565b61303c826131dd565b810181811067ffffffffffffffff8211171561305b5761305a61319a565b5b80604052505050565b600061306f82612f7e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130a2576130a16130de565b5b600182019050919050565b60006130b882612f7e565b91506130c383612f7e565b9250826130d3576130d261310d565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f20627920486f73706974616c3a20000000000000000000000000000000000000600082015250565b7f20627920557365722e0000000000000000000000000000000000000000000000600082015250565b7f203a3a2052656d6f76656420486f73706974616c203a20000000000000000000600082015250565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b7f203a3a2052656d6f76656420446f63746f72203a200000000000000000000000600082015250565b7f2064756520746f2072656d6f76696e67206f6620506172656e7420486f73706960008201527f74616c20627920557365722e0000000000000000000000000000000000000000602082015250565b7f203a3a2052656d6f76656420446f63746f723a20000000000000000000000000600082015250565b7f202e000000000000000000000000000000000000000000000000000000000000600082015250565b7f46756e6374696f6e2061636365737369626c65206f6e6c79206279207468652060008201527f4f776e6572212100000000000000000000000000000000000000000000000000602082015250565b7f3a3a20456469746564204d65646963616c204461746120627920446f63746f7260008201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b61340381612f40565b811461340e57600080fd5b50565b61341a81612f52565b811461342557600080fd5b50565b61343181612f7e565b811461343c57600080fd5b5056fea264697066735822122045f2cd836934b39105f1d073e844873a6a717a99e4a22369aecd4d17a2d6649064736f6c63430008070033"

var bytecodeIdCard="608060405234801561001057600080fd5b5060405161076e38038061076e833981810160405281019061003291906100ab565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600081905550505061015a565b6000815190506100908161012c565b92915050565b6000815190506100a581610143565b92915050565b600080604083850312156100c2576100c1610127565b5b60006100d085828601610096565b92505060206100e185828601610081565b9150509250929050565b60006100f6826100fd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b610135816100eb565b811461014057600080fd5b50565b61014c8161011d565b811461015757600080fd5b50565b610605806101696000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639ef68fe51161005b5780639ef68fe5146100d6578063dfd45b81146100f4578063e5bc790814610112578063f84951c41461012e5761007d565b80630625c3d414610082578063503b45e01461009e578063880cdc31146100ba575b600080fd5b61009c6004803603810190610097919061052a565b61014a565b005b6100b860048036038101906100b3919061052a565b6101f6565b005b6100d460048036038101906100cf919061052a565b6102b6565b005b6100de610354565b6040516100eb9190610566565b60405180910390f35b6100fc61037e565b6040516101099190610566565b60405180910390f35b61012c6004803603810190610127919061052a565b6103a8565b005b6101486004803603810190610143919061052a565b610468565b005b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101a457600080fd5b60008054116101b257600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461025057600080fd5b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461031057600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461040257600080fd5b6003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104c257600080fd5b6001600054116104d157600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081359050610524816105b8565b92915050565b6000602082840312156105405761053f6105b3565b5b600061054e84828501610515565b91505092915050565b61056081610581565b82525050565b600060208201905061057b6000830184610557565b92915050565b600061058c82610593565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6105c181610581565b81146105cc57600080fd5b5056fea2646970667358221220c1a232aa1eaa4a0da51d677785a07ecb78bec92c137c84b89b270d64fb2c559864736f6c63430008070033";


if (window.ethereum) 
{
  window.web3 = new Web3(window.ethereum)
  try {
      // ask user for permission
      ethereum.enable()
      // user approved permission
  } catch (error) {
      // user rejected permission
      console.log('user rejected permission')
  }
}
else if (window.web3) 
{
  window.web3 = new Web3(window.web3.currentProvider)
  // no need to ask for permission
}
else 
{
  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')
}
console.log (window.web3.currentProvider)

// Constants

//Variables 
var contract;
var account;
var newAccount;
var newIdCardAddress;
var newMedicalCardAddress;

//Web3 fucntions
// "account-address"
web3.eth.getAccounts(function(err, accounts) {
  if (err != null) {
    alert("Error retrieving accounts.");
    return;
  }
  if (accounts.length == 0) {
    alert("No account found! Make sure the Ethereum client is configured properly.");
    return;
  }
  account = accounts[0];

  contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);

  contract.methods.role(account).call(function (err, res) {
	if (res != 0) 
	{ 
	  if(res==2)
	  {
		location.assign("patient.html"); 
	  }
	  else if(res==1)
	  {
		location.assign("doctor.html"); 
	  }
	  else
	  {
		location.assign("/login.html"); 
	  }
	}
	})
  document.getElementById('account-address').innerText = "Address : " + account;
  console.log('Account: ' + account);
  web3.eth.defaultAccount = account;
});


loadPatientsofHospital();
loadDoctorsofHospital();


//Id Card Functions

function setContractAddress(){
	identityCardContractAddress = $("#newInfo1").val();
	$("#newInfo1").val('');
	document.getElementById('lastInfo1').innerHTML =identityCardContractAddress;
}

function updateParentHospitalAddress()
{
	contract = new web3.eth.Contract(abiIdentityCard, identityCardContractAddress);
  	info = $("#newInfo").val();
  	contract.methods.updateParentHospital(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#newInfo").val('');
}

function viewParentHospitalAddress()
{
	contract = new web3.eth.Contract(abiIdentityCard, identityCardContractAddress);
  	contract.methods.viewParentHospital().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		document.getElementById('lastInfo').innerHTML = res;
	  })
}

function updateMedicalDataAddress(identity_card_address, medical_card_address)
{
	contract = new web3.eth.Contract(abiIdentityCard, identity_card_address);
  	contract.methods.updateMedicalData(medical_card_address).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
}

async function viewMedicalDataAddress()
{
	await getIDCard();
	contract = new web3.eth.Contract(abiIdentityCard, identityCardContractAddress);
  	contract.methods.viewMedicalData().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("Medical data address: ", res)
		addressOfMedicalRecord = res;
		// document.getElementById('lastInfo2').innerHTML = res;
	  })
}




///////////////////////////////////Medical Data Interaction

function setContractAddress2(){
	medicalDataContractAddress = $("#medical-data-address").val();
	$("#medical-data-address").val('');
	document.getElementById('get-medical-data-address').innerHTML = medicalDataContractAddress;
}

function removeDoctor()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#remove-doctor").val();
  contract.methods.removeDoctor(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#remove-doctor").val('');
}


function addMedicalData()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Medical-data").val();
  contract.methods.addMedicalData(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Medical-data").val('');
}

function addHospitalByHospital()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Hospital-By-Hospital").val();
  contract.methods.addHospitalByHospital(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Hospital-By-Hospital").val('');
}

function addHospitalByPatient()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Hospital-By-Patient").val();
  contract.methods.addHospitalByPatient(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Hospital-By-Patient").val('');
}

function addDoctorByHospital()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Doctor-By-Hospital").val();
  contract.methods.addDoctorByHospital(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Doctor-By-Hospital").val('');
}

function addDoctorByPatient()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Doctor-By-Patient").val();
  contract.methods.addDoctorByPatient(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Doctor-By-Patient").val('');
}

function updateParentHospital()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#update-Parent-Hospital").val();
  contract.methods.addDoctorByPatient(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#update-Parent-Hospital").val('');
}

async function loadLogs()
{
    var medicalData = getMedicalDataAddress(account)
		
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  	contract.methods.getLog().call(function (err, res) 
	  {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		
		document.getElementById('log-of-medical-data').innerHTML = res;
	  })
}

function setCentralDatabaseAddress(){
	centralDatabaseContractAddress = $("#central-database-address").val();
	$("#central-database-address").val('');
	document.getElementById('get-central-database-address').innerHTML = centralDatabaseContractAddress;
}

function updateDoctor()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	doctorAddress = $("#central-database-doctor-address").val();
  	identityAddress = $("#central-database-doctor-identity-address").val();
	console.log(doctorAddress);
	console.log(identityAddress);
	contract.methods.updateDoctor(doctorAddress,identityAddress).send( {from: account}).then( function(tx) { 
			console.log("Transaction: ", tx); 
	});
	$("#central-database-doctor-address").val('');
	$("#central-database-doctor-identity-address").val('');
}

function updateHospital()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	hospitalAddress = $("#central-database-hospital-address").val();
  	identityAddress = $("#central-database-hospital-identity-address").val();
  
	contract.methods.updateHospital(hospitalAddress,identityAddress).send( {from: account}).then( function(tx) { 
			console.log("Transaction: ", tx); 
	});
	$("#central-database-hospital-address").val('');
	$("#central-database-hospital-identity-address").val('');
}

function updatePatient()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	patientAddress = $("#central-database-patient-address").val();
  	identityAddress = $("#central-database-patient-identity-address").val();
  
	contract.methods.updatePatient(patientAddress,identityAddress).send( {from: account}).then( function(tx) { 
			console.log("Transaction: ", tx); 
	});
	$("#central-database-patient-address").val('');
	$("#central-database-patient-identity-address").val('');
}



function loadDoctorsofHospital()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	contract.methods.loadDoctorsOfHospital().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		buildtable(res,'doctors-of-hospital');

	  })
}


function loadPatientsofHospital()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	contract.methods.loadPatientsOfHospital().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		//document.getElementById('patients-of-hospital').innerHTML = res;
        buildtable(res,'patients-of-hospital');
	  })
}

async function getIDCard()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
	console.log("Finding Id address");
  	contract.methods.getIDCard(account).call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		identityCardContractAddress = res;
		//return res;
	  })
}

function getMedicalDataAddress(userAddress)
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	contract.methods.getMedicalDataAddress(userAddress).call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("MEdical data add is : ", res);
		medicalDataContractAddress = res;
	//	document.getElementById('doctors-of-hospital').innerHTML = res;
		return res;
	  })
}
//Creating Doctor and Patient


	function updateDoctorInDatabase()
	{
		contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
		contract.methods.updateDoctor(newAccount.address,newIdCardAddress).send( {from: account}).then( function(tx) { 
				console.log("Transaction: ", tx); 
		});
	}

	function updatePatientInDatabase()
	{
		contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
		contract.methods.updatePatient(newAccount.address,newIdCardAddress,newMedicalCardAddress).send( {from: account}).then( function(tx) { 
				console.log("Transaction: ", tx); 
		});
	}

	async function  createIdCard(role){

		var deployingContract = new web3.eth.Contract(abiIdentityCard).deploy({
			data: bytecodeIdCard,
			arguments: [role,newAccount.address]
		});

		console.log(deployingContract);
		var estimateGas = await deployingContract.estimateGas();
		var deployedContract = await deployingContract.send({
			from: account,
			gas: estimateGas
		})

		console.log('Address of Id card contract' + deployedContract.options.address);
		newIdCardAddress = deployedContract.options.address;
		//document.getElementById('new-id-card-address').innerText = "Address of Id - Card : "+ JSON.stringify(newIdCardAddress);
		
	};




	async function  createMedicalData(){

		
		var deployingContract = new web3.eth.Contract(abiMedicalData).deploy({
			data: bytecodeMedicalData,
			arguments: [centralDatabaseContractAddress,newAccount.address]
		});
		console.log(deployingContract);
		var estimateGas = await deployingContract.estimateGas();
		var deployedContract = await deployingContract.send({
		from: account,
		gas: estimateGas
		})

		console.log('Address of Medical Data contract' + deployedContract.options.address);
		newMedicalCardAddress = deployedContract.options.address;
		//document.getElementById('new-medical-details').innerText = JSON.stringify(deployedContract.options);
		
	};


	async function createAccountandTransaction()
	{
	
		newAccount = await web3.eth.accounts.create();;
		console.log("New Account is :", newAccount);

		const amount = 2; // Willing to send 2 ethers
		const amountToSend = web3.utils.toWei(String(amount), "ether"); // Convert to wei value
		var send = web3.eth.sendTransaction({ from: account, to: newAccount.address, value: amountToSend });
		await web3.eth.getBalance(account, (err, bal) => { console.log("Ganache balance", bal); } );

		
		//document.getElementById('new-account-address').innerText = "Address: "+JSON.stringify(newAccount.address); 
		//document.getElementById('new-account-private-key').innerText = "Private Key:" +JSON.stringify(newAccount.privateKey); 
	}



	async function createDoctor()
	{
		await createAccountandTransaction();
		await createIdCard(1);
		await updateDoctorInDatabase();
		document.getElementById('new-doctor-account-details').innerText = "New Account Address: "+JSON.stringify(newAccount.address) + "\n" + "Private Key:" +JSON.stringify(newAccount.privateKey) + "\n" + "Address of Id - Card : "+ JSON.stringify(newIdCardAddress); 
	}

	async function createPatient()
	{
		await createAccountandTransaction();
		await createIdCard(2);
		await createMedicalData();
		await updatePatientInDatabase();
		document.getElementById('new-patient-account-details').innerText = "New Account Address: "+JSON.stringify(newAccount.address) + "\n" + "Private Key:" +JSON.stringify(newAccount.privateKey) + "\n" + "Address of Id - Card : "+ JSON.stringify(newIdCardAddress)+ "\n" + "Address of Medical - Data Card : "+ JSON.stringify(newMedicalCardAddress); 
	}




	function buildtable(data,id){

	
		console.log("Table callled");
	
	  var table = document.getElementById(id);
	     
      table.style.display = 'inline-table';
          
    
	  for (var i = 0; i < data.length; i++) {
		var row =
		  ` <tr>
		<td> ${i + 1}</td>
		<td style="text-align: center;"> ${data[i]}</td>
		</tr>`

		table.innerHTML += row;
	  }
	  
	  table.innerHTML += `</table>`
	  

	  
	}