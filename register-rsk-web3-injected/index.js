// Source code to interact with smart contract
// web3 provider with fallback for old version
//var Web3 = require('web3');

if (window.ethereum) 
{
  window.web3 = new Web3(window.ethereum)
  try {
      // ask user for permission
      ethereum.enable()
      // user approved permission
  } catch (error) {
      // user rejected permission
      console.log('user rejected permission')
  }
}
else if (window.web3) 
{
  window.web3 = new Web3(window.web3.currentProvider)
  // no need to ask for permission
}
else 
{
  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')
}
console.log (window.web3.currentProvider)

// Constants
var identityCardContractAddress = '0x267EE4b8eC7357252B6b8A2E6A2481AB40Da5076';
var medicalDataContractAddress = '0x267EE4b8eC7357252B6b8A2E6A2481AB40Da5076';
var centralDatabaseContractAddress = '0xb28aa838646F3413c347F3407C04A07C5bAA72B0';
var abiIdentityCard = [
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "role",
				"type": "uint256"
			},
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "pushDoctor",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "pushPatient",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "medicalData",
				"type": "address"
			}
		],
		"name": "updateMedicalData",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "updateOwner",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "parentHospital",
				"type": "address"
			}
		],
		"name": "updateParentHospital",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewMedicalData",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewParentHospital",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
var abiMedicalData = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "centralDatabase",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "addDoctorByHospital",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "addDoctorByPatient",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "addHospitalByHospital",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "addHospitalByPatient",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "data",
				"type": "string"
			}
		],
		"name": "editMedicalData",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getLog",
		"outputs": [
			{
				"internalType": "string[]",
				"name": "",
				"type": "string[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isAuthorized",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isNotOwner",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isOwner",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "removeDoctorByHospital",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "removeDoctorByPatient",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "removeHospitalsByPatient",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewMedicalDataByDoctor",
		"outputs": [
			{
				"internalType": "string[]",
				"name": "",
				"type": "string[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "viewMedicalDataByPatient",
		"outputs": [
			{
				"internalType": "string[]",
				"name": "",
				"type": "string[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
var abiCenteralDatabase = [
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getIDCard",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getMedicalDataAddress",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "getParentHospital",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "isDoctor",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "isHospital",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "isPatient",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadDoctors",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadDoctorsOfHospital",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadHospitals",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadPatients",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loadPatientsOfHospital",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			}
		],
		"name": "role",
		"outputs": [
			{
				"internalType": "int256",
				"name": "",
				"type": "int256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "identityCardAddress",
				"type": "address"
			}
		],
		"name": "updateDoctor",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "identityCardAddress",
				"type": "address"
			}
		],
		"name": "updateHospital",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "userAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "identityCardAddress",
				"type": "address"
			},
			{
				"internalType": "address",
				"name": "medicalDataAddress",
				"type": "address"
			}
		],
		"name": "updatePatient",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];

var bytecodeMedicalData="60806040523480156200001157600080fd5b5060405162003542380380620035428339818101604052810190620000379190620000d8565b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000172565b600081519050620000d28162000158565b92915050565b60008060408385031215620000f257620000f162000153565b5b60006200010285828601620000c1565b92505060206200011585828601620000c1565b9150509250929050565b60006200012c8262000133565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b62000163816200011f565b81146200016f57600080fd5b50565b6133c080620001826000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806390cbc1c21161008c578063c5fe4dde11610066578063c5fe4dde1461025d578063d23b28881461028d578063d8896854146102ab578063de607e3c146102c9576100ea565b806390cbc1c2146101e1578063a655fe53146101fd578063b54b09c01461022d576100ea565b8063512a3c64116100c8578063512a3c641461016b57806357e6c2f4146101875780638f32d59b146101a5578063909e4ab6146101c3576100ea565b80630a79f810146100ef5780631112a7e11461011f578063485c9b3f1461014f575b600080fd5b610109600480360381019061010491906123d0565b6102e7565b60405161011691906129e4565b60405180910390f35b610139600480360381019061013491906123d0565b6106b3565b60405161014691906129e4565b60405180910390f35b610169600480360381019061016491906123d0565b610933565b005b610185600480360381019061018091906123d0565b610df7565b005b61018f611076565b60405161019c91906129e4565b60405180910390f35b6101ad611121565b6040516101ba91906129e4565b60405180910390f35b6101cb611179565b6040516101d891906129c2565b60405180910390f35b6101fb60048036038101906101f691906123d0565b6112ac565b005b61021760048036038101906102129190612457565b6115c3565b60405161022491906129e4565b60405180910390f35b610247600480360381019061024291906123d0565b61171e565b60405161025491906129e4565b60405180910390f35b610277600480360381019061027291906123d0565b6119de565b60405161028491906129e4565b60405180910390f35b610295611c5d565b6040516102a291906129e4565b60405180910390f35b6102b3611cb6565b6040516102c091906129c2565b60405180910390f35b6102d1611ddb565b6040516102de91906129c2565b60405180910390f35b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bdf6c673336040518263ffffffff1660e01b815260040161034891906129a7565b60206040518083038186803b15801561036057600080fd5b505afa158015610374573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610398919061242a565b6103a157600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663996440c6846040518263ffffffff1660e01b81526004016103da91906129a7565b60206040518083038186803b1580156103f257600080fd5b505afa158015610406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042a919061242a565b61043357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663a4c63410856040518263ffffffff1660e01b815260040161048391906129a7565b60206040518083038186803b15801561049b57600080fd5b505afa1580156104af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d391906123fd565b73ffffffffffffffffffffffffffffffffffffffff16146104f357600080fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461053e57600080fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461058a57600080fd5b6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600561063d42611f0e565b61064685612075565b61064f33612075565b604051602001610661939291906128e1565b6040516020818303038152906040529080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906106a892919061227e565b506001915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461070f57600080fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663996440c6846040518263ffffffff1660e01b815260040161076f91906129a7565b60206040518083038186803b15801561078757600080fd5b505afa15801561079b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107bf919061242a565b6107c857600080fd5b6000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461081457600080fd5b6001600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506003839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060056108c742611f0e565b6108d085612075565b6040516020016108e1929190612933565b60405160208183030381529060405290806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061092892919061227e565b506001915050919050565b61093b611121565b61097a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610971906129ff565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109d457600080fd5b60018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610a1f57600080fd5b6000805b600480549050811015610ab9578273ffffffffffffffffffffffffffffffffffffffff1660048281548110610a5b57610a5a61306e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610aa6578091505b8080610ab190612f67565b915050610a23565b5060048181548110610ace57610acd61306e565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600090506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006001600380549050610b7f9190612ddb565b90505b60008110610d84578373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1663a4c6341060038481548110610bd157610bd061306e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401610c1891906129a7565b60206040518083038186803b158015610c3057600080fd5b505afa158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6891906123fd565b73ffffffffffffffffffffffffffffffffffffffff161415610d71576005610c8f42611f0e565b610cd660038481548110610ca657610ca561306e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612075565b604051602001610ce79291906128a7565b604051602081830303815290604052908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610d2e92919061227e565b5060038181548110610d4357610d4261306e565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b8080610d7c90612eda565b915050610b82565b506005610d9042611f0e565b610d9985612075565b604051602001610daa929190612755565b604051602081830303815290604052908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190610df192919061227e565b50505050565b610dff611121565b610e3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e35906129ff565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e9857600080fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ee457600080fd5b6000805b600380549050811015610f7e578273ffffffffffffffffffffffffffffffffffffffff1660038281548110610f2057610f1f61306e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610f6b578091505b8080610f7690612f67565b915050610ee8565b5060038181548110610f9357610f9261306e565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600561101042611f0e565b61101984612075565b60405160200161102a92919061286d565b60405160208183030381529060405290806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061107192919061227e565b505050565b60006001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414156110c9576001905061111e565b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541415611119576001905061111e565b600090505b90565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905090565b6060600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111d557600080fd5b6005805480602002602001604051908101604052809291908181526020016000905b828210156112a357838290600052602060002001805461121690612f04565b80601f016020809104026020016040519081016040528092919081815260200182805461124290612f04565b801561128f5780601f106112645761010080835404028352916020019161128f565b820191906000526020600020905b81548152906001019060200180831161127257829003601f168201915b5050505050815260200190600101906111f7565b50505050905090565b6112b4611121565b6112f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ea906129ff565b60405180910390fd5b6001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461133f57600080fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663a4c63410846040518263ffffffff1660e01b81526004016113b691906129a7565b60206040518083038186803b1580156113ce57600080fd5b505afa1580156113e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140691906123fd565b73ffffffffffffffffffffffffffffffffffffffff161461142657600080fd5b6000805b6003805490508110156114c0578373ffffffffffffffffffffffffffffffffffffffff16600382815481106114625761146161306e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114ad578091505b80806114b890612f67565b91505061142a565b50600381815481106114d5576114d461306e565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600561155242611f0e565b61155b85612075565b61156433612075565b6040516020016115769392919061281b565b6040516020818303038152906040529080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906115bd92919061227e565b50505050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561162057600080fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461166c57600080fd5b600561167742611f0e565b61168033612075565b60405160200161169192919061296d565b6040516020818303038152906040529080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906116d892919061227e565b5060008290806001815401808255809150506001900390600052602060002001600090919091909150908051906020019061171492919061227e565b5060019050919050565b600080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bdf6c673336040518263ffffffff1660e01b815260040161177f91906129a7565b60206040518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf919061242a565b6117d857600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1663bdf6c673846040518263ffffffff1660e01b815260040161181191906129a7565b60206040518083038186803b15801561182957600080fd5b505afa15801561183d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611861919061242a565b61186a57600080fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146118b657600080fd5b6004839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600561196842611f0e565b61197185612075565b61197a33612075565b60405160200161198c9392919061278f565b6040516020818303038152906040529080600181540180825580915050600190039060005260206000200160009091909190915090805190602001906119d392919061227e565b506001915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611a3a57600080fd5b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663bdf6c673846040518263ffffffff1660e01b8152600401611a9a91906129a7565b60206040518083038186803b158015611ab257600080fd5b505afa158015611ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aea919061242a565b611af357600080fd5b6000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611b3f57600080fd5b6004839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506005611bf142611f0e565b611bfa85612075565b604051602001611c0b9291906127e1565b604051602081830303815290604052908060018154018082558091505060019003906000526020600020016000909190919091509080519060200190611c5292919061227e565b506001915050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415905090565b60606001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611d0457600080fd5b6000805480602002602001604051908101604052809291908181526020016000905b82821015611dd2578382906000526020600020018054611d4590612f04565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7190612f04565b8015611dbe5780601f10611d9357610100808354040283529160200191611dbe565b820191906000526020600020905b815481529060010190602001808311611da157829003601f168201915b505050505081526020019060010190611d26565b50505050905090565b60603373ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611e3757600080fd5b6000805480602002602001604051908101604052809291908181526020016000905b82821015611f05578382906000526020600020018054611e7890612f04565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea490612f04565b8015611ef15780601f10611ec657610100808354040283529160200191611ef1565b820191906000526020600020905b815481529060010190602001808311611ed457829003601f168201915b505050505081526020019060010190611e59565b50505050905090565b60606000821415611f56576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612070565b600082905060005b60008214611f88578080611f7190612f67565b915050600a82611f819190612b73565b9150611f5e565b60008167ffffffffffffffff811115611fa457611fa361309d565b5b6040519080825280601f01601f191660200182016040528015611fd65781602001600182028036833780820191505090505b50905060008290508593505b6000841461206857600a84611ff79190612fb0565b60306120039190612ae6565b60f81b828261201190612eda565b925082815181106120255761202461306e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a846120619190612b73565b9350611fe2565b819450505050505b919050565b60606000602867ffffffffffffffff8111156120945761209361309d565b5b6040519080825280601f01601f1916602001820160405280156120c65781602001600182028036833780820191505090505b50905060005b601481101561222e5760008160136120e49190612ddb565b60086120f09190612d46565b60026120fc9190612c28565b8573ffffffffffffffffffffffffffffffffffffffff1661211d9190612b73565b60f81b9050600060108260f81c6121349190612ba4565b60f81b905060008160f81c601061214b9190612da0565b8360f81c6121599190612e0f565b60f81b905061216782612238565b858560026121759190612d46565b815181106121865761218561306e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506121be81612238565b8560018660026121ce9190612d46565b6121d89190612ae6565b815181106121e9576121e861306e565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350505050808061222690612f67565b9150506120cc565b5080915050919050565b6000600a8260f81c60ff1610156122635760308260f81c6122599190612b3c565b60f81b9050612279565b60578260f81c6122739190612b3c565b60f81b90505b919050565b82805461228a90612f04565b90600052602060002090601f0160209004810192826122ac57600085556122f3565b82601f106122c557805160ff19168380011785556122f3565b828001600101855582156122f3579182015b828111156122f25782518255916020019190600101906122d7565b5b5090506123009190612304565b5090565b5b8082111561231d576000816000905550600101612305565b5090565b600061233461232f84612a44565b612a1f565b9050828152602081018484840111156123505761234f6130d1565b5b61235b848285612e98565b509392505050565b6000813590506123728161335c565b92915050565b6000815190506123878161335c565b92915050565b60008151905061239c81613373565b92915050565b600082601f8301126123b7576123b66130cc565b5b81356123c7848260208601612321565b91505092915050565b6000602082840312156123e6576123e56130db565b5b60006123f484828501612363565b91505092915050565b600060208284031215612413576124126130db565b5b600061242184828501612378565b91505092915050565b6000602082840312156124405761243f6130db565b5b600061244e8482850161238d565b91505092915050565b60006020828403121561246d5761246c6130db565b5b600082013567ffffffffffffffff81111561248b5761248a6130d6565b5b612497848285016123a2565b91505092915050565b60006124ac8383612547565b905092915050565b6124bd81612e43565b82525050565b60006124ce82612a85565b6124d88185612aa8565b9350836020820285016124ea85612a75565b8060005b85811015612526578484038952815161250785826124a0565b945061251283612a9b565b925060208a019950506001810190506124ee565b50829750879550505050505092915050565b61254181612e55565b82525050565b600061255282612a90565b61255c8185612ab9565b935061256c818560208601612ea7565b612575816130e0565b840191505092915050565b600061258b82612a90565b6125958185612adb565b93506125a5818560208601612ea7565b80840191505092915050565b60006125be600e83612adb565b91506125c9826130fe565b600e82019050919050565b60006125e1600983612adb565b91506125ec82613127565b600982019050919050565b6000612604601783612adb565b915061260f82613150565b601782019050919050565b6000612627601483612adb565b915061263282613179565b601482019050919050565b600061264a600183612adb565b9150612655826131a2565b600182019050919050565b600061266d601583612adb565b9150612678826131cb565b601582019050919050565b6000612690602c83612adb565b915061269b826131f4565b602c82019050919050565b60006126b3601483612adb565b91506126be82613243565b601482019050919050565b60006126d6600283612adb565b91506126e18261326c565b600282019050919050565b60006126f9602783612aca565b915061270482613295565b604082019050919050565b600061271c601283612adb565b9150612727826132e4565b601282019050919050565b600061273f602283612adb565b915061274a8261330d565b602282019050919050565b60006127618285612580565b915061276c826125f7565b91506127788284612580565b9150612783826125d4565b91508190509392505050565b600061279b8286612580565b91506127a68261261a565b91506127b28285612580565b91506127bd826125b1565b91506127c98284612580565b91506127d48261263d565b9150819050949350505050565b60006127ed8285612580565b91506127f88261261a565b91506128048284612580565b915061280f826125d4565b91508190509392505050565b60006128278286612580565b915061283282612660565b915061283e8285612580565b9150612849826125b1565b91506128558284612580565b91506128608261263d565b9150819050949350505050565b60006128798285612580565b9150612884826126a6565b91506128908284612580565b915061289b826125d4565b91508190509392505050565b60006128b38285612580565b91506128be826126a6565b91506128ca8284612580565b91506128d582612683565b91508190509392505050565b60006128ed8286612580565b91506128f88261270f565b91506129048285612580565b915061290f826125b1565b915061291b8284612580565b91506129268261263d565b9150819050949350505050565b600061293f8285612580565b915061294a8261270f565b91506129568284612580565b9150612961826125d4565b91508190509392505050565b60006129798285612580565b915061298482612732565b91506129908284612580565b915061299b826126c9565b91508190509392505050565b60006020820190506129bc60008301846124b4565b92915050565b600060208201905081810360008301526129dc81846124c3565b905092915050565b60006020820190506129f96000830184612538565b92915050565b60006020820190508181036000830152612a18816126ec565b9050919050565b6000612a29612a3a565b9050612a358282612f36565b919050565b6000604051905090565b600067ffffffffffffffff821115612a5f57612a5e61309d565b5b612a68826130e0565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612af182612e81565b9150612afc83612e81565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612b3157612b30612fe1565b5b828201905092915050565b6000612b4782612e8b565b9150612b5283612e8b565b92508260ff03821115612b6857612b67612fe1565b5b828201905092915050565b6000612b7e82612e81565b9150612b8983612e81565b925082612b9957612b98613010565b5b828204905092915050565b6000612baf82612e8b565b9150612bba83612e8b565b925082612bca57612bc9613010565b5b828204905092915050565b6000808291508390505b6001851115612c1f57808604811115612bfb57612bfa612fe1565b5b6001851615612c0a5780820291505b8081029050612c18856130f1565b9450612bdf565b94509492505050565b6000612c3382612e81565b9150612c3e83612e81565b9250612c6b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612c73565b905092915050565b600082612c835760019050612d3f565b81612c915760009050612d3f565b8160018114612ca75760028114612cb157612ce0565b6001915050612d3f565b60ff841115612cc357612cc2612fe1565b5b8360020a915084821115612cda57612cd9612fe1565b5b50612d3f565b5060208310610133831016604e8410600b8410161715612d155782820a905083811115612d1057612d0f612fe1565b5b612d3f565b612d228484846001612bd5565b92509050818404811115612d3957612d38612fe1565b5b81810290505b9392505050565b6000612d5182612e81565b9150612d5c83612e81565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d9557612d94612fe1565b5b828202905092915050565b6000612dab82612e8b565b9150612db683612e8b565b92508160ff0483118215151615612dd057612dcf612fe1565b5b828202905092915050565b6000612de682612e81565b9150612df183612e81565b925082821015612e0457612e03612fe1565b5b828203905092915050565b6000612e1a82612e8b565b9150612e2583612e8b565b925082821015612e3857612e37612fe1565b5b828203905092915050565b6000612e4e82612e61565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612ec5578082015181840152602081019050612eaa565b83811115612ed4576000848401525b50505050565b6000612ee582612e81565b91506000821415612ef957612ef8612fe1565b5b600182039050919050565b60006002820490506001821680612f1c57607f821691505b60208210811415612f3057612f2f61303f565b5b50919050565b612f3f826130e0565b810181811067ffffffffffffffff82111715612f5e57612f5d61309d565b5b80604052505050565b6000612f7282612e81565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612fa557612fa4612fe1565b5b600182019050919050565b6000612fbb82612e81565b9150612fc683612e81565b925082612fd657612fd5613010565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f20627920486f73706974616c3a20000000000000000000000000000000000000600082015250565b7f20627920557365722e0000000000000000000000000000000000000000000000600082015250565b7f203a3a2052656d6f76656420486f73706974616c203a20000000000000000000600082015250565b7f203a3a20416464656420486f73706974616c3a20000000000000000000000000600082015250565b7f2e00000000000000000000000000000000000000000000000000000000000000600082015250565b7f203a3a2052656d6f76656420446f63746f72203a200000000000000000000000600082015250565b7f2064756520746f2072656d6f76696e67206f6620506172656e7420486f73706960008201527f74616c20627920557365722e0000000000000000000000000000000000000000602082015250565b7f203a3a2052656d6f76656420446f63746f723a20000000000000000000000000600082015250565b7f202e000000000000000000000000000000000000000000000000000000000000600082015250565b7f46756e6374696f6e2061636365737369626c65206f6e6c79206279207468652060008201527f4f776e6572212100000000000000000000000000000000000000000000000000602082015250565b7f203a3a20416464656420446f63746f723a200000000000000000000000000000600082015250565b7f3a3a20456469746564204d65646963616c204461746120627920446f63746f7260008201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b61336581612e43565b811461337057600080fd5b50565b61337c81612e55565b811461338757600080fd5b5056fea26469706673582212201836ac8b0e98a12d6e37462f70ee558f6e3c36fe806b4dc76ca6323c2e8f97ab64736f6c63430008070033";

var bytecodeIdCard="608060405234801561001057600080fd5b5060405161076e38038061076e833981810160405281019061003291906100ab565b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600081905550505061015a565b6000815190506100908161012c565b92915050565b6000815190506100a581610143565b92915050565b600080604083850312156100c2576100c1610127565b5b60006100d085828601610096565b92505060206100e185828601610081565b9150509250929050565b60006100f6826100fd565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b610135816100eb565b811461014057600080fd5b50565b61014c8161011d565b811461015757600080fd5b50565b610605806101696000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80639ef68fe51161005b5780639ef68fe5146100d6578063dfd45b81146100f4578063e5bc790814610112578063f84951c41461012e5761007d565b80630625c3d414610082578063503b45e01461009e578063880cdc31146100ba575b600080fd5b61009c6004803603810190610097919061052a565b61014a565b005b6100b860048036038101906100b3919061052a565b6101f6565b005b6100d460048036038101906100cf919061052a565b6102b6565b005b6100de610354565b6040516100eb9190610566565b60405180910390f35b6100fc61037e565b6040516101099190610566565b60405180910390f35b61012c6004803603810190610127919061052a565b6103a8565b005b6101486004803603810190610143919061052a565b610468565b005b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101a457600080fd5b60008054116101b257600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461025057600080fd5b6004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461031057600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461040257600080fd5b6003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104c257600080fd5b6001600054116104d157600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600081359050610524816105b8565b92915050565b6000602082840312156105405761053f6105b3565b5b600061054e84828501610515565b91505092915050565b61056081610581565b82525050565b600060208201905061057b6000830184610557565b92915050565b600061058c82610593565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6105c181610581565b81146105cc57600080fd5b5056fea2646970667358221220c1a232aa1eaa4a0da51d677785a07ecb78bec92c137c84b89b270d64fb2c559864736f6c63430008070033";

//Variables 
var contract;
var account;
var newAccount;
var newIdCardAddress;
var newMedicalCardAddress;

//Web3 fucntions
web3.eth.getAccounts(function(err, accounts) {
  if (err != null) {
    alert("Error retrieving accounts.");
    return;
  }
  if (accounts.length == 0) {
    alert("No account found! Make sure the Ethereum client is configured properly.");
    return;
  }
  account = accounts[0];
  console.log('Account: ' + account);
  web3.eth.defaultAccount = account;
});




//Id Card Functions

function setContractAddress(){
	identityCardContractAddress = $("#newInfo1").val();
	$("#newInfo1").val('');
	document.getElementById('lastInfo1').innerHTML =identityCardContractAddress;
}

function updateParentHospitalAddress()
{
	contract = new web3.eth.Contract(abiIdentityCard, identityCardContractAddress);
  	info = $("#newInfo").val();
  	contract.methods.updateParentHospital(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#newInfo").val('');
}

function viewParentHospitalAddress()
{
	contract = new web3.eth.Contract(abiIdentityCard, identityCardContractAddress);
  	contract.methods.viewParentHospital().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		document.getElementById('lastInfo').innerHTML = res;
	  })
}

function updateMedicalDataAddress(identity_card_address, medical_card_address)
{
	contract = new web3.eth.Contract(abiIdentityCard, identity_card_address);
  	contract.methods.updateMedicalData(medical_card_address).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
}

async function viewMedicalDataAddress()
{
	await getIDCard();
	contract = new web3.eth.Contract(abiIdentityCard, identityCardContractAddress);
  	contract.methods.viewMedicalData().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("Medical data address: ", res)
		addressOfMedicalRecord = res;
		// document.getElementById('lastInfo2').innerHTML = res;
	  })
}




///////////////////////////////////Medical Data Interaction

function setContractAddress2(){
	medicalDataContractAddress = $("#medical-data-address").val();
	$("#medical-data-address").val('');
	document.getElementById('get-medical-data-address').innerHTML = medicalDataContractAddress;
}

function removeDoctor()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#remove-doctor").val();
  contract.methods.removeDoctor(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#remove-doctor").val('');
}


function addMedicalData()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Medical-data").val();
  contract.methods.addMedicalData(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Medical-data").val('');
}

function addHospitalByHospital()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Hospital-By-Hospital").val();
  contract.methods.addHospitalByHospital(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Hospital-By-Hospital").val('');
}

function addHospitalByPatient()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Hospital-By-Patient").val();
  contract.methods.addHospitalByPatient(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Hospital-By-Patient").val('');
}

function addDoctorByHospital()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Doctor-By-Hospital").val();
  contract.methods.addDoctorByHospital(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Doctor-By-Hospital").val('');
}

function addDoctorByPatient()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#add-Doctor-By-Patient").val();
  contract.methods.addDoctorByPatient(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#add-Doctor-By-Patient").val('');
}

function updateParentHospital()
{
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  info = $("#update-Parent-Hospital").val();
  contract.methods.addDoctorByPatient(info).send( {from: account}).then( function(tx) { 
         console.log("Transaction: ", tx); 
  });
  $("#update-Parent-Hospital").val('');
}

async function loadLogs()
{
    var medicalData = getMedicalDataAddress(account)
		
	contract = new web3.eth.Contract(abiMedicalData, medicalDataContractAddress);
  	contract.methods.getLog().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		
		document.getElementById('log-of-medical-data').innerHTML = res;
	  })
}

// async function viewMedicalDataByDoctor(userAddress)
// {
//     var localMedicalDataAddress = getMedicalDataAddress(userAddress)
		
// 	contract = new web3.eth.Contract(abiMedicalData, localMedicalDataAddress);
//   	contract.methods.viewMedicalDataByDoctor().call(function (err, res) {
// 		if (err) {
// 		  console.log("An error occured", err)
// 		  return
// 		}
// 		console.log("The reply is: ", res)
		
// 		//document.getElementById('log-of-medical-data').innerHTML = res;
// 	  })
// }

// async function viewMedicalDataByPatient()
// {
//     var localMedicalDataAddress = getMedicalDataAddress(userAddress)
		
// 	contract = new web3.eth.Contract(abiMedicalData, localMedicalDataAddress);
//   	contract.methods.viewMedicalDataByDoctor().call(function (err, res) {
// 		if (err) {
// 		  console.log("An error occured", err)
// 		  return
// 		}
// 		console.log("The reply is: ", res)
		
// 		//document.getElementById('log-of-medical-data').innerHTML = res;
// 	  })
// }






//////////////Central Database 


function setCentralDatabaseAddress(){
	centralDatabaseContractAddress = $("#central-database-address").val();
	$("#central-database-address").val('');
	document.getElementById('get-central-database-address').innerHTML = centralDatabaseContractAddress;
}



function updateDoctor()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	doctorAddress = $("#central-database-doctor-address").val();
  	identityAddress = $("#central-database-doctor-identity-address").val();
	console.log(doctorAddress);
	console.log(identityAddress);
	contract.methods.updateDoctor(doctorAddress,identityAddress).send( {from: account}).then( function(tx) { 
			console.log("Transaction: ", tx); 
	});
	$("#central-database-doctor-address").val('');
	$("#central-database-doctor-identity-address").val('');
}


function updateHospital()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	hospitalAddress = $("#central-database-hospital-address").val();
  	identityAddress = $("#central-database-hospital-identity-address").val();
  
	contract.methods.updateHospital(hospitalAddress,identityAddress).send( {from: account}).then( function(tx) { 
			console.log("Transaction: ", tx); 
	});
	$("#central-database-hospital-address").val('');
	$("#central-database-hospital-identity-address").val('');
}

function updatePatient()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	patientAddress = $("#central-database-patient-address").val();
  	identityAddress = $("#central-database-patient-identity-address").val();
  
	contract.methods.updatePatient(patientAddress,identityAddress).send( {from: account}).then( function(tx) { 
			console.log("Transaction: ", tx); 
	});
	$("#central-database-patient-address").val('');
	$("#central-database-patient-identity-address").val('');
}



function isPatient()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	patientAddress = $("#central-database-is-patient-address").val();
  	console.log(patientAddress);
	  contract.methods.isPatient(patientAddress).call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		document.getElementById('get-central-database-is-patient-address').innerHTML = res;
	  })
	$("#central-database-is-patient-address").val('');
	
	
}



function isDoctor()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	doctorAddress = $("#central-database-is-doctor-address").val();
  	console.log(doctorAddress);
	  contract.methods.isDoctor(doctorAddress).call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		document.getElementById('get-central-database-is-doctor-address').innerHTML = res;
	  })
	$("#central-database-is-doctor-address").val('');
	
	
}



function isHospital()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	hospitalAddress = $("#central-database-is-hospital-address").val();
  	console.log(hospitalAddress);
	  contract.methods.isHospital(hospitalAddress).call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		document.getElementById('get-central-database-is-hospital-address').innerHTML = res;
	  })
	$("#central-database-is-hospital-address").val('');
	
	
}


function loadDoctorsofHospital()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	contract.methods.loadDoctorsOfHospital().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		document.getElementById('doctors-of-hospital').innerHTML = res;
	  })
}


function loadPatientsofHospital()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	contract.methods.loadPatientsOfHospital().call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		document.getElementById('patients-of-hospital').innerHTML = res;
	  })
}

async function getIDCard()
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
	console.log("Finding Id address");
  	contract.methods.getIDCard(account).call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("The reply is: ", res)
		identityCardContractAddress = res;
		//return res;
	  })
}

function getMedicalDataAddress(userAddress)
{
	contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
  	contract.methods.getMedicalDataAddress(userAddress).call(function (err, res) {
		if (err) {
		  console.log("An error occured", err)
		  return
		}
		console.log("MEdical data add is : ", res);
		medicalDataContractAddress = res;
	//	document.getElementById('doctors-of-hospital').innerHTML = res;
		return res;
	  })
}
//Creating Doctor and Patient


	function updateDoctorInDatabase()
	{
		contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
		contract.methods.updateDoctor(newAccount.address,newIdCardAddress).send( {from: account}).then( function(tx) { 
				console.log("Transaction: ", tx); 
		});
	}

	function updatePatientInDatabase()
	{
		contract = new web3.eth.Contract(abiCenteralDatabase, centralDatabaseContractAddress);
		contract.methods.updatePatient(newAccount.address,newIdCardAddress,newMedicalCardAddress).send( {from: account}).then( function(tx) { 
				console.log("Transaction: ", tx); 
		});
	}

	async function  createIdCard(role){

		var deployingContract = new web3.eth.Contract(abiIdentityCard).deploy({
			data: bytecodeIdCard,
			arguments: [role,newAccount.address]
		});

		console.log(deployingContract);
		var estimateGas = await deployingContract.estimateGas();
		var deployedContract = await deployingContract.send({
			from: account,
			gas: estimateGas
		})

		console.log('Address of Id card contract' + deployedContract.options.address);
		newIdCardAddress = deployedContract.options.address;
		//document.getElementById('new-id-card-address').innerText = "Address of Id - Card : "+ JSON.stringify(newIdCardAddress);
		
	};




	async function  createMedicalData(){

		
		var deployingContract = new web3.eth.Contract(abiMedicalData).deploy({
			data: bytecodeMedicalData,
			arguments: [centralDatabaseContractAddress,newAccount.address]
		});
		console.log(deployingContract);
		var estimateGas = await deployingContract.estimateGas();
		var deployedContract = await deployingContract.send({
		from: account,
		gas: estimateGas
		})

		console.log('Address of Medical Data contract' + deployedContract.options.address);
		newMedicalCardAddress = deployedContract.options.address;
		//document.getElementById('new-medical-details').innerText = JSON.stringify(deployedContract.options);
		
	};


	async function createAccountandTransaction()
	{
	
		newAccount = await web3.eth.accounts.create();;
		console.log("New Account is :", newAccount);

		const amount = 2; // Willing to send 2 ethers
		const amountToSend = web3.utils.toWei(String(amount), "ether"); // Convert to wei value
		var send = web3.eth.sendTransaction({ from: account, to: newAccount.address, value: amountToSend });
		await web3.eth.getBalance(account, (err, bal) => { console.log("Ganache balance", bal); } );

		
		//document.getElementById('new-account-address').innerText = "Address: "+JSON.stringify(newAccount.address); 
		//document.getElementById('new-account-private-key').innerText = "Private Key:" +JSON.stringify(newAccount.privateKey); 
	}



	async function createDoctor()
	{
		await createAccountandTransaction();
		await createIdCard(1);
		await updateDoctorInDatabase();
		document.getElementById('new-doctor-account-details').innerText = "New Account Address: "+JSON.stringify(newAccount.address) + "\n" + "Private Key:" +JSON.stringify(newAccount.privateKey) + "\n" + "Address of Id - Card : "+ JSON.stringify(newIdCardAddress); 
	}

	async function createPatient()
	{
		await createAccountandTransaction();
		await createIdCard(2);
		await createMedicalData();
		await updatePatientInDatabase();
		document.getElementById('new-patient-account-details').innerText = "New Account Address: "+JSON.stringify(newAccount.address) + "\n" + "Private Key:" +JSON.stringify(newAccount.privateKey) + "\n" + "Address of Id - Card : "+ JSON.stringify(newIdCardAddress)+ "\n" + "Address of Medical - Data Card : "+ JSON.stringify(newMedicalCardAddress); 
	}


